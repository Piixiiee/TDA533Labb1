- Bör ni använda implementationsarv (subclassing) eller specifikationsarv (interfaces)? Varför? Kan båda användas?
Vilka för- och nackdelar ser ni?

Svar: Vi borde använda subclassing eftersom att vi vill implementera metoder, inte bara se vilka metoder klasserna har.
Vi vill inte använda interfaces eftersom att det finns flera metoder som båda bilarna ska ha som gör samma sak, vilket man hade
behövt implementera i båda bil-classerna om vi använt ett Car-interface istället för Car-superclass.
Båda kan egentligen användas, men koden behöver dupliceras om vi använder interface över superclass, och därför
sparar vi ingen tid och får mycket code duplication.
Fördelarna med subclassing är att vi minskar code duplication eftersom att många av dom olika bilarnas metoder är samma.
Fördelarna med interfaces är att man kan ärva från flera interfaces, men i just detta fallet är det inget vi behöver.

- Vilken synlighet bör ni använda för de olika metoder och variabler som klasserna innehåller? Vilket gränssnitt bör ni exponera?

Svar: Vi använder abstract i Car för att se till att man inte kan skapa en "Car" utan man måste skapa en Saab95 eller Volvo240.
Vi använder protected på dom flesta variabler i Car så att endast dom klasser som ärver ur Car kan sätta värden på variablerna.
Vi använder public på resterande metoder i Car så att alla kan se informationen även om dom är utanför klassen och inte ärver från klassen.
Vi använder private för turbo, samt trimfactor i dom olika bilarna eftersom att det bara är dom som ska kunna se, ändra och använda variablerna.
Vi använder private för x- och y-directions så att ingenting ska kunna ändra våra directionsregler